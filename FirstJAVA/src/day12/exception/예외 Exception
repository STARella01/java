 	
 	Exception (예외)
 	
 	- Error는 Program에 치명적인 영향을 미치는 상황을 나타냄.
 	- 따라서 Error 발생 시 프로그램은 종료된다.
 	- Exception은 적절한 처리를 통해서 프로그램이 계속 실행할 수 있는 정도의 Error
 	
 	[ Exception처리는 2가지 방법 ]
 	
 	> 1. try - catch - finally
		-예외의 원인이 현재 실행되는 블록에 있는 경우 직접 예외를 처리하는 구문
		ex )) 
		try {
			// 예외가 발생할 가능성이 있는 코드
		}catch(exception e){ // catch는 예외처리 최상위 개체
			// 예외가 발생했을 때 실행할 코드
			// else문 처러 catch안에 catch 중첩 사용 가능함
		}finally{
			// 꼭 써야하지는 않지만 예외 발생 여부와 상관없이 
			// 반드시 실행해야 할 코드를 입력한다.( ex. 자원 반납) 
		}
		(자원 반납 : Scanner close처럼 할당했던 반납을 다시 비우는 것)		
		
		대부분의 예외는 '입력을 받는' 경우이다.
		또는 실행 파일을 불러 오는 경우.
		
		일부러 일으키는 경우도 있음 - 미리 예외 상황을 예상해 보기 위해
		
		프로그램 구동에 문제가 없더라도 사용상 에러가 발생할 수 있음
		
		순서는 지켜줘야함. 만약 catch가 맨 위로 올라가면 최상위 개체이므로 나머지 코드가 씹힐 수 있음.
		
		
	> 2. Throws 
		- 예외의 원인이 그 메서드를 호출하는 호출자에게 있는 경우 사용.
		- 예외 발생 시 예외가 발생했음을 메서드 호출자에게 통지해줌.
		- 메서드 선언부에 throws절을 사용!
		ex )) 
		반환타입 메서드명(매개변수) throws [예외들,] { 
			
		}
		
		
	- 사용자 정의 예외
	> Exception 또는 그 하위 예외 클래스들을 '상속'받아 구현함.
	
	- 예외를 발생시키고 싶을 때 사용하는 키워드
		throws (예외처리할 때 사용하는 throw랑은 다름)
		
		
		
		
		throws Exception - 시스템에 예외 처리 토스!
		
		
		- 첫번째 예외 사항이 발생하면 거기서 멈춤.	
		- 예외는 예외가 발생하는 지점에서 추가해준다.		
		
		caller
		cally? callee?
		
		( 시스템이 예외 받으면 무조건 '종료' )
		
		[ 저장공간 3가지 ]
		
		stack 임시 저장 공간
		
		heap 임시 저장 공간 
		
		data 변경사항 거의 없음
		
 	종료해야 하는 상황 / 구동 관련 큰 문제 없어서 종료까지는 아닌 상황으로 나뉘어짐.
 
 
 // 지역변수 나가면 없어짐 -> 자동으로 자원 정리해줌
 
 