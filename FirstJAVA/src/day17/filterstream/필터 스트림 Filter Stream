	
	필터 스트림 Filter Stream
	
	앞서 살펴본 노드 스트림 클래스는 "노드"를 기반으로 해당 노도의 내용을 읽거나 쓰는 일을 함
	반면 필터 스트림은 노드 스트림을 기반으로 해당 '노트 스트림의 입출력 기능 강화'시킴
	대표적인 것이 BufferReader와 같은 경우로 '한줄씩 읽어와서 String 형식으로 반환'해 주는 readLine()
	이라는 메서드가 존재한다.

	필터 스트림 클래스 중에 Buffered*** , DataInput/OutputStream, ObjectInput/OutputStream
	
	=====================================================
	[ Type ]						[ Byte Streams ]					[ Character Streams ]
	-----------------------------------------------------------------------------------
	Buffering						BufferedInputStream			BufferedReader
									BufferedOutputStream			BufferedWriter
	-----------------------------------------------------------------------------------								
	Data Conversion			DataInputStream				-									
									DataOutputStream
	-----------------------------------------------------------------------------------
	Filtering						FilterInputStream				FilterReader
									FilterOutputStream				FilterWriter
	-----------------------------------------------------------------------------------
	Converting					-									InputStreamReader
	byte<->character												OutputStreamWriter
	-----------------------------------------------------------------------------------
	Object						ObjectInputStream	
	serialization					ObjectOutputStream						
	-----------------------------------------------------------------------------------
	Counting						LineNumberInputStream		LineNumber	Reader
	Printing						PrintStream						PrintWriter
	======================================================
	
	[ BufferedWriter ]
	- 이 클래스는 텍스트 파일을 프로그램으로 쓸 때 사용하는 문자 기반 스트림
	- 데이터를 읽고, '버퍼에 저장한 후 한 번에' 쓰는 형태로 동작하기 때문에 속도가 빠름!
	- 노드 스트림을 매개 변수로 받아서 처리하는 필터 스트림이다.
	
	주요 메서드
	- writer : 노드 스트림과 거의 비슷한 기능함.
	- flush : 버터 비운다
	
	주의 사항 : 버퍼가 가득 찼을 때만 출력을 해내기 때문에 flush()를 호출하여 잔류하는 데이터를 모두 내보내야 함.
	
	
	[ BufferedReader ]
	- 이 클래스는 텍스트 파일을 프로그램으로 읽을 때 사용하는 문자 스트림으로 
	- 버퍼를 이용하여 저장 후 한 번에 읽는 방식으로 속도가 빠름
	- 사용방법은 BufferedWrite와 같이 노트 스트림을 매개변수로 받음
	
	주요 메서드 : Reader 클래스와 거의 동일
	- readLine() : 한 줄을 한꺼번에 읽어 들여서 처리. 읽어들일 값이 없을 때 null을 반환
	
	주의 사항 : 
		
	======================================================
	
	고객 정보를 파일에 저장해 보자.	
	
	데이터가 클 때 (저장할 내용이 많을 때) 
	프로그램은 크게 2가지 메모리로 나뉘어진다. 휘발성 - RAM / 비휘발성 - Hard 저장소
	
	1. 어떤 타입으로 저장할 건지? (byte 단위로 저장할 것인지? char 단위로 저장할 것인지)
		- byte 단위 : FileInputStream / FileOutputStream
		- char 단위 : FileReader / FileWriter
		
	2.	어떤 형식으로 저장할 것인가? ( 저장 방법 - 어떤 내용으로 저장할 것이냐 )
		고객 정보가 이름, 성별, 이메일, 나이가 있다고 가정했을 경우,
		
		
		-단순 텍스트를 사용하는 경우
				L 홍길동,M,hgd@gmail.com,30\n 		-> 문자와 숫자가 같이 사용되고 있음
				L 김누구,M,hgd2@gmail.com,35\n		-> 문자와 숫자가 같이 사용되고 있음				
				
		데이터를 저장할 때 각 필드 구분자와 컬럼 구분자를 추가해야 하고, '정보를 잘라서 형변환'해야 한다.
		-> 범용적이지만 불편하다 ( 구분자를 이용한 문자열 분리와 형변환 작업이 필요함)
					
		---------------------------------------------------------			
					
		- DataOutputStream 클래스를 이용해서 저장하는 방법
		특징 
		> 필드 구분자와 컬럼 구분자를 추가할 필요가 없음.
		> 읽은 정보를 형변환 할 필요가 없다.
		
		단점
		> Write했던 순서대로 읽어야 한다. java에서만 사용 가능
		
		---------------------------------------------------------
		
		[ 객체 직렬화 ]
		
		객체 직렬화란 객체를 byte 포맷의 스트림 형식으로 변환하여 처리하는 것을 말함.
		역직렬화란 byte 포맷의 스트림 데이터를 객체로 변환하는 과정
		
		- 객체 직렬화를 이용해서 저장
		특징
		>객체 직렬화가 가능한 클래스여야 함
		>자바에서만 사용 가능
		
		Serializable 객체 구분값
		- 직렬화 클래스가 구현해야 할 인터페이스
		- 마커 인터페이스임
		- 객체 단위로 파일에 저장할 수 있도록 한다.
		- 실제로 저장 되는것은 멤버 변수 데이터만 저장되고,
		생성자나 메서드 코드는 저장되지 않는다.
		(받는 쪽에서 직렬화된 객체에 해당하는 클래스를 그대로 가지고 있어햐 함.) -데이터가 다르면 다른 결과가 나올 수 있기 때문에 같은 데이터로 처리해야 한다는 얘기!!
		
		객체 저장
		ObjectOutputStream의 writeObject() 메서드를 이용
		
		객체 읽기
		ObjectInputStream의 readObject() 메서드를 이용
		
		transient : 객체 직렬화에서 제외할 변수에 선언
		-> 저장 안해도 됨?!!!!!!!!!
		
		- serialVersionUID : 
		- 직렬화 클래스의 "구조가 변경될 경우" 불러오지 못하는 예외를 방지하기 위해 선언
		- private static final long serialVersionUID = 564654564654654L; (구분값으로 사용하는 녀석..)
		

		=============================================
		
		
		
		
					
		
	
	
	
	